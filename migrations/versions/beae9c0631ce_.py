"""empty message

Revision ID: beae9c0631ce
Revises: cefdfb1a281f
Create Date: 2025-04-15 17:21:43.717123

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'beae9c0631ce'
down_revision = 'cefdfb1a281f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('commanders',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('scryfall_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('flavor_name', sa.String(), nullable=True),
    sa.Column('mana_cost', sa.String(), nullable=True),
    sa.Column('type_line', sa.String(), nullable=True),
    sa.Column('oracle_text', sa.Text(), nullable=True),
    sa.Column('power', sa.String(), nullable=True),
    sa.Column('toughness', sa.String(), nullable=True),
    sa.Column('loyalty', sa.String(), nullable=True),
    sa.Column('colors', sa.String(), nullable=True),
    sa.Column('color_identity', sa.String(), nullable=True),
    sa.Column('set_code', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('art_crop', sa.String(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('partner', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('background', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('choose_a_background', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('friends_forever', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('doctor_companion', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('time_lord_doctor', sa.Boolean(), server_default='0', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('scryfall_id')
    )
    op.create_table('deck_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('hash', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('decks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('deck_type_id', sa.Integer(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['deck_type_id'], ['deck_types.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'name', name='uq_user_tag_name')
    )
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tags_user_id'), ['user_id'], unique=False)

    op.create_table('commander_decks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('deck_id', sa.Integer(), nullable=False),
    sa.Column('commander_id', sa.Integer(), nullable=False),
    sa.Column('associated_commander_id', sa.Integer(), nullable=True),
    sa.Column('relationship_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['commander_id'], ['commanders.id'], ),
    sa.ForeignKeyConstraint(['deck_id'], ['decks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('deck_tags',
    sa.Column('deck_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['deck_id'], ['decks.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('deck_id', 'tag_id')
    )
    op.create_table('user_decks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('deck_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['deck_id'], ['decks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('matches',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('result', sa.Integer(), nullable=False),
    sa.Column('user_deck_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('result IN (0, 1, 2)', name='check_match_result'),
    sa.ForeignKeyConstraint(['user_deck_id'], ['user_decks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_tags',
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('match_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('match_tags')
    op.drop_table('matches')
    op.drop_table('user_decks')
    op.drop_table('deck_tags')
    op.drop_table('commander_decks')
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tags_user_id'))

    op.drop_table('tags')
    op.drop_table('decks')
    op.drop_table('users')
    op.drop_table('deck_types')
    op.drop_table('commanders')
    # ### end Alembic commands ###

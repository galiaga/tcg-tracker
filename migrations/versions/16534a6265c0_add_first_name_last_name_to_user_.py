"""Add nullable first/last name, require email, make username optional

Revision ID: 16534a6265c0
Revises: 31e86250293f
Create Date: 2025-04-29 16:44:35.024122

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '16534a6265c0'
down_revision = '31e86250293f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - adjusted for safety ###
    print("Applying migration 16534a6265c0: Adding nullable name columns, modifying email/username...")

    # Use batch mode for better compatibility (especially SQLite)
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Step 1: Add name columns as NULLABLE initially
        print("Adding nullable first_name column...")
        batch_op.add_column(sa.Column('first_name', sa.String(length=100), nullable=True))
        print("Adding nullable last_name column...")
        batch_op.add_column(sa.Column('last_name', sa.String(length=100), nullable=True))

        # Step 2: Alter email to be non-nullable
        # !!! IMPORTANT PRE-REQUISITE !!!
        # Ensure ALL existing users in your database HAVE a valid, non-NULL email address
        # BEFORE running `flask db upgrade`. If any user has NULL email, this step will FAIL.
        print("Altering email column to nullable=False...")
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120), # Use VARCHAR if that's what Alembic detected
               nullable=False)

        # Step 3: Alter username to be nullable
        print("Altering username column to nullable=True...")
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=80), # Use VARCHAR if detected
               nullable=True)

        # Step 4: REMOVED - Index already exists
        # print("Ensuring unique index exists on email column...")
        # batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True) # <-- REMOVE OR COMMENT OUT THIS LINE

    print("Migration 16534a6265c0 upgrade step completed.")
    print("\n" + "="*40)
    print("IMPORTANT MANUAL ACTION REQUIRED:")
    print("1. Connect to your database.")
    print("2. Run SQL UPDATE statements to set 'first_name' and 'last_name'")
    print("   for ALL existing users.")
    print("   Example: UPDATE users SET first_name = 'Beta', last_name = 'Tester1' WHERE id = 1;")
    print("3. AFTER populating the names, generate the NEXT migration:")
    print("   flask db migrate -m \"Make user first_name and last_name non-nullable\"")
    print("4. Run `flask db upgrade` again to apply the non-nullable constraint.")
    print("="*40 + "\n")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - adjusted ###
    print("Reverting migration 16534a6265c0...")
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Reverse index creation - REMOVED as it wasn't created here
        # print("Dropping index ix_users_email...")
        # batch_op.drop_index(batch_op.f('ix_users_email')) # <-- REMOVE OR COMMENT OUT THIS LINE

        # Reverse username nullability change
        # Warning: This might fail if any usernames were set to NULL.
        print("Altering username column back to nullable=False...")
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=80),
               nullable=False)

        # Reverse email nullability change
        print("Altering email column back to nullable=True...")
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)

        # Drop the added columns
        print("Dropping last_name column...")
        batch_op.drop_column('last_name')
        print("Dropping first_name column...")
        batch_op.drop_column('first_name')

    print("Migration 16534a6265c0 downgrade completed.")
    # ### end Alembic commands ###
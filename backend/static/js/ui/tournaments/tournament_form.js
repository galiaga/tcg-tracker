// backend/static/js/ui/tournaments/tournament_form.js

document.addEventListener('DOMContentLoaded', function () {
    // Select the event_date input field.
    // The ID of the input field is generated by WTForms, usually it's the field name.
    const eventDateInput = document.getElementById('event_date');

    if (eventDateInput) {
        flatpickr(eventDateInput, {
            enableTime: true,        // Enable time selection
            dateFormat: "Y-m-d H:i:S", // Match the format expected by WTForms and Python
            altInput: true,          // Show a more human-friendly date in the input
            altFormat: "F j, Y h:i K", // Format for the human-friendly display (e.g., August 24, 2024 06:00 PM)
            time_24hr: false,         // Use 12-hour time format with AM/PM if desired for display
                                     // The actual submitted value will still be Y-m-d H:i:S (24hr if H is used)
            minuteIncrement: 15,     // Increment minutes by 15
            // Default to a sensible time, e.g., next hour
            defaultDate: new Date(new Date().setHours(new Date().getHours() + 1, 0, 0, 0)),
            // You can add more options as needed, e.g., minDate
            // minDate: "today",
        });
        console.log("Flatpickr initialized for event_date input.");
    } else {
        console.warn("Event date input field with ID 'event_date' not found for Flatpickr initialization.");
    }

    // You can add other simple form enhancements here if needed.
    // For example, character counters for textareas, or simple client-side validations
    // (though WTForms handles the robust validation server-side).

    // Example: Character counter for description
    const descriptionTextarea = document.getElementById('description');
    if (descriptionTextarea) {
        const maxLength = descriptionTextarea.getAttribute('maxlength') || 5000; // Get from attribute or default
        const counterElement = document.createElement('div');
        counterElement.className = 'text-xs text-gray-500 dark:text-gray-400 mt-1 text-right';
        
        const updateCounter = () => {
            const currentLength = descriptionTextarea.value.length;
            counterElement.textContent = `${currentLength} / ${maxLength}`;
            if (currentLength > maxLength) {
                counterElement.classList.add('text-red-500');
                counterElement.classList.remove('text-gray-500', 'dark:text-gray-400');
            } else {
                counterElement.classList.remove('text-red-500');
                counterElement.classList.add('text-gray-500', 'dark:text-gray-400');
            }
        };

        // Insert counter after the textarea
        descriptionTextarea.parentNode.insertBefore(counterElement, descriptionTextarea.nextSibling);
        
        // Initial update and on input
        updateCounter();
        descriptionTextarea.addEventListener('input', updateCounter);
        console.log("Character counter initialized for description textarea.");
    }

});